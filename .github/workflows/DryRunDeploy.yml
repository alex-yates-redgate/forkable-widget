name: Dry Run Deploy

on:
  workflow_dispatch:

jobs:
  dry_run_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Data Container
        id: createDc
        env:
          RGCLONE_API_ENDPOINT: ${{ secrets.RGCLONE_API_ENDPOINT }}
          RGCLONE_ACCESS_TOKEN: ${{ secrets.RGCLONE_ACCESS_TOKEN }}
          #RG_ACCOUNT: ${{ secrets.REDGATE_ACCOUNT }}
          HASH: ${{ github.sha }}
        run: |
          echo "Downloading and unzipping rgclone..."
          RGCLONE_DOWNLOAD_URL="${RGCLONE_API_ENDPOINT}cloning-api/download/cli/linux-amd64"
          curl -sS "$RGCLONE_DOWNLOAD_URL" | tar xz
 
          echo "Creating data container..."
          CONTAINER_NAME="widget-dry-run-${{ github.run_number }}-$(echo "${HASH:0:8}")"
          output=$(./rgclone create data-container --image Widget --name $CONTAINER_NAME --lifetime 5m --output yaml)
          #./rgclone update dc $CONTAINER_NAME --user $RG_ACCOUNT

          # Outputting JDBC for flyway
          dcJdbc=$(echo "$output" | grep -o 'jdbcconnectionstring: .*' | cut -d ' ' -f 2-)
          dbJdbc="${dcJdbc}databaseName=WidgetProduction"
          echo "jdbc=$dbJdbc" >> $GITHUB_ENV
      
      - name: Flyway Migrate
        env:
          FLYWAY_VERSION: "10.8.1"
        run: |
          echo "Downloading and unzipping Flyway ${FLYWAY_VERSION}..."
          curl -sS https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz | tar xz >/dev/null
          export PATH="$PWD/flyway-${FLYWAY_VERSION}:$PATH"
          
          echo "Running flyway migrate to target: $jdbc"
          flyway migrate -url="$jdbc" -locations="filesystem:./migrations"