name: Dry Run Deploy

on:
    workflow_dispatch:

jobs:
  dry_run_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Data Container
        id: createDc
        run: |
          # Setting up rgclone.exe
          export RGCLONE_API_ENDPOINT=${{ secrets.RGCLONE_API_ENDPOINT }}
          export RGCLONE_ACCESS_TOKEN=${{ secrets.RGCLONE_ACCESS_TOKEN }}
          RGCLONE_DOWNLOAD_URL="$RGCLONE_API_ENDPOINT"
          RGCLONE_DOWNLOAD_URL+="cloning-api/download/cli/linux-amd64"
          echo "Downloading and unzipping rgclone from $RGCLONE_DOWNLOAD_URL"
          curl $RGCLONE_DOWNLOAD_URL | tar xz
          
          # Creating data container
          echo "Creating data container"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.sha }}"
          output=$(./redgate/rgclone create data-container --image Widget --name "widget-dry-run-$BUILD_NUMBER" --lifetime 15m --output yaml)
          
          # Outputting JDBC for flyway
          dcJdbc=$(echo "$output" | grep -o 'jdbcconnectionstring: .*' | cut -d ' ' -f 2-)
          dbJdbc="${dcJdbc}databaseName=WidgetProduction"
          echo "::set-output name=jdbc::$dbJdbc"

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      
      - name: Flyway Migrate
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.5.13/flyway-commandline-8.5.13-linux-x64.tar.gz | tar xvz
          export PATH="$PWD/flyway-8.5.13:$PATH"
          echo "Running flyway migrate to target ${{ steps.createDc.outputs.jdbc }}"
          flyway migrate -url="${{ steps.createDc.outputs.jdbc }}" -locations="filesystem:./migrations"
      
